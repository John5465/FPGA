// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/23/2016 15:18:56"
                                                                                
// Verilog Test Bench template for design : Multip_16
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module Multip_16_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [15:0] ain;
reg [15:0] bin;
reg clk;
reg rst_n;
reg start;
// wires                                               
wire done;
wire [31:0]  yout;

// assign statements (if any)                          
Multip_16 i1 (
// port map - connection between master ports and signals/registers   
	.ain(ain),
	.bin(bin),
	.clk(clk),
	.done(done),
	.rst_n(rst_n),
	.start(start),
	.yout(yout)
);

initial begin
	clk = 0;
	forever
	#10 clk = ~clk;    //50MHz 
end

initial begin
   rst_n = 1'b0;
	start = 1'b0;
	ain = 16'd0;
	bin = 16'd0;
	#1000;
	rst_n = 1'b1;	//上电后1us复位信号
	
	#1000;
	ain = 16'd89;
	bin = 16'd33;
	#100;
	start = 1'b1;
	#4500;
	start = 1'b0;
	#1000_000;
	$stop;
end
                             
endmodule

